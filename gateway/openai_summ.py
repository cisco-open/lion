
# Copyright 2022 Cisco Systems, Inc. and its affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

"""

This file contains: 

- def generate_log_summary(api_key, log_data)

"""

import openai 


def generate_log_summary(api_key, log_data):

    """
    Generates a summary of log data using the OpenAI GPT-3 model.

    This function takes log data and utilizes the OpenAI GPT-3 model to generate a summary in English.
    The generated summary provides insights into the log data, such as patterns, anomalies, and whether
    the observed data is usual or unusual.

    Parameters:
    api_key (str): The OpenAI API key for authentication.
    log_data (str): The log data to be summarized.

    Returns:
    str: A summary of the log data in English generated by the GPT-3 model.

    Example:
    >>> api_key = "your_openai_api_key"
    >>> log_data = "2023-09-14 10:00:00 - User logged in. 2023-09-14 10:15:00 - Error: Page not found."
    >>> summary = generate_log_summary(api_key, log_data)
    >>> print(summary)
    "On 2023-09-14, there was a user login event, followed by an error indicating 'Page not found.' This appears unusual."

    In this example, the function uses the GPT-3 model to generate a summary of the provided log data.
    
    """

    openai.api_key = api_key

    prompt_prefix = """Can you summarize this log data in English? It is only a partial list of the log entries, 
    so keep that in mind when making statements about the entire dataset. Is this usual or unusual? Any patterns or anomalies?"""

    prompt = prompt_prefix + log_data

    res = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{'role' : 'user', 'content' : prompt}],
                )

    res_text = res['choices'][0]['message']['content']
    return res_text
